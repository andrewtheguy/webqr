{"version":3,"sources":["GenerateQR.tsx","ScanQR.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["QRCode","require","GenerateQR","useState","svg","setSvg","text","setText","useEffect","svgdata","padding","content","join","container","Container","Row","Col","className","htmlFor","onClick","autoCorrect","autoCapitalize","id","rows","onChange","e","target","value","style","width","maxWidth","dangerouslySetInnerHTML","__html","canvas","document","getElementById","createElement","height","ctx","getContext","DOMURL","window","URL","webkitURL","img","Image","svgBlob","Blob","type","url","createObjectURL","console","log","onerror","alert","onload","drawImage","revokeObjectURL","dataurl","filename","a","href","setAttribute","click","download","toDataURL","src","ScanQR","data","setData","scanTimedOut","setScanTimedOut","timer1","setTimeout","clearTimeout","isValidUrl","error","DataSection","props","urlInfo","setUrlInfo","validUrl","cols","readOnly","select","delay","facingMode","onError","err","onScan","backgroundColor","ExampleToast","children","show","toggleShow","Button","Toast","onClose","Header","Body","App","Navbar","bg","Nav","exact","to","activeClassName","fluid","path","Jumbotron","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e15394bb.chunk.js","sourcesContent":["import React from 'react';\nimport { useState,useEffect } from 'react';\nimport {Col, Form, FormControl, Nav, Navbar, NavDropdown, Row} from \"react-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\nimport Canvg, {\n    presets, RenderingContext2D\n} from 'canvg';\n\nconst QRCode = require(\"qrcode-svg\");\n\nfunction download(dataurl: string, filename: string) {\n    var a = document.createElement(\"a\");\n    a.href = dataurl;\n    a.setAttribute(\"download\", filename);\n    a.click();\n}\n\nconst GenerateQR: React.FC = () => {\n    const [svg,setSvg] = useState<string | null>(null);\n    const [text,setText] = useState('');\n\n    const HandleChangeText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const text=e.target.value;\n\n        setText(text);\n    }\n\n    const downloadPng = () =>{\n        if(svg !==null) {\n\n                //memory leak, should clean up\n                let canvas = document.getElementById('draw-qr-save') as HTMLCanvasElement;\n                if (!canvas) {\n                    canvas = document.createElement('canvas');\n                    canvas.width=320;\n                    canvas.height=320;\n                    canvas.id='draw-qr-save';\n                }\n                const ctx = canvas.getContext('2d') as RenderingContext2D;\n\n\n                const DOMURL = window.URL || window.webkitURL || window;\n\n                const img = new Image();\n                const svgBlob = new Blob([svg], {type: 'image/svg+xml'});\n                const url = DOMURL.createObjectURL(svgBlob);\n                console.log(svgBlob);\n                img.onerror = function (e) {\n                    alert(\"error downloading\");\n                }\n                img.onload = function () {\n                    ctx.drawImage(img, 0, 0);\n                    DOMURL.revokeObjectURL(url);\n                    const imgURI = canvas\n                        .toDataURL('image/png');\n                    //alert(imgURI)\n                    download(imgURI, \"qrcode.png\")\n                };\n\n                img.src = url;\n\n        }\n    }\n\n\n    useEffect(() => {\n        if(text!==''){\n            const svgdata = new QRCode({\n                //width: 300,\n                //height: 300,\n                padding: 1,\n                content: text,\n                join: true,\n                container: \"svg-viewbox\" //Useful but not required\n            }).svg();\n            setSvg(svgdata);\n        }else{\n            setSvg(null);\n        }\n    }, [text]);\n\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"qr_text\">Enter Text: <button onClick={()=> setText('')}>Clear</button></label>\n                        <textarea autoCorrect=\"off\" autoCapitalize=\"none\" className=\"form-control\" id=\"qr_text\" rows={3}  onChange={HandleChangeText}  value={text}></textarea>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <div>{typeof svg === 'string' ?\n                        <div style={{width:\"100%\",maxWidth: 320}}><div dangerouslySetInnerHTML={{ __html: svg!}}></div>\n                            <button onClick={downloadPng}>Download PNG</button>\n                        </div> :<span>No text entered</span>}</div>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default GenerateQR;\n","import React from 'react';\nimport { useState,useEffect } from 'react';\nimport {Col, Form, FormControl, Nav, Navbar, NavDropdown, Row} from \"react-bootstrap\";\nimport QrReader from 'modern-react-qr-reader';\n\nconst ScanQR: React.FC = () => {\n    const [data,setData] = useState<string | null>(null);\n    const [scanTimedOut,setScanTimedOut] = useState(false);\n\n\n    useEffect(() => {\n            if(data === null && !scanTimedOut) {\n                let timer1 = setTimeout(() => setScanTimedOut(true), 60*1000); // 1 minute\n\n                // this will clear Timeout\n                // when component unmount like in willComponentUnmount\n                // and show will not change to true\n                return () => {\n                    clearTimeout(timer1);\n                };\n            }\n        },\n        // useEffect will run only one time with empty []\n        // if you pass a value to array,\n        // like this - [data]\n        // than clearTimeout will run every time\n        // this value changes (useEffect re-run)\n        [data,scanTimedOut]\n    );\n\n\n    const handleScan = (data: string | null) => {\n        if (data) {\n            console.log(data);\n            setData(data);\n        }\n    }\n\n    const handleError = (err: any) => {\n        console.error(err)\n    }\n\n    const isValidUrl = (url: string) => {\n        try {\n            new URL(url);\n        } catch (e) {\n            console.error(e);\n            return false;\n        }\n        return true;\n    };\n\n\n    function DataSection(props: {data: string}){\n        const { data } = props;\n        const [urlInfo,setUrlInfo] = useState<any | null>(null);\n\n\n        useEffect(() => {\n            setUrlInfo({validUrl: isValidUrl(data)})\n        },[data]);\n\n        if(!urlInfo){\n            return <div>Loading url info</div>;\n        }else{\n            return <div>{urlInfo.validUrl ? <a href={data} target=\"_blank\">{data}</a> : <textarea rows={6} cols={40} readOnly onClick={(e) => { (e.target as HTMLTextAreaElement).select() } }>{data}</textarea>}</div>;\n        }\n\n    }\n\n    return (\n        <Row>\n            <Col>\n                <div>\n                    {scanTimedOut && <span>timed out <p><button onClick={()=>setScanTimedOut(false)}>Scan Again</button></p></span>}\n                    {!scanTimedOut && !data && <QrReader\n                        delay={500}\n                        facingMode={\"environment\"}\n                        onError={handleError}\n                        onScan={handleScan}\n                        style={{ width: '100%', maxWidth: 600, padding: 10 }}\n                    />}\n                    {data ? <div id=\"qr-reader-results\"><h1>data:</h1><DataSection data={data}></DataSection>\n                        <p><button onClick={()=>setData(null)}>Scan Again</button></p>\n                    </div> : <div style={{backgroundColor: 'yellow'}}>Nothing yet</div>}\n                    {/* JSON.stringify({data,scanTimedOut}) */}\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default ScanQR;\n","import React, { useState } from 'react';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\n\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link,\n    NavLink\n} from \"react-router-dom\";\n\nimport './App.css';\nimport {Col, Form, FormControl, Nav, Navbar, NavDropdown, Row} from \"react-bootstrap\";\nimport GenerateQR from \"./GenerateQR\";\nimport ScanQR from \"./ScanQR\";\n\nconst ExampleToast: React.FC = ({\n                                    children,\n                                }) => {\n    const [show, toggleShow] = useState(true);\n\n    return (\n        <>\n            {!show && <Button onClick={() => toggleShow(true)}>Show Toast</Button>}\n            <Toast show={show} onClose={() => toggleShow(false)}>\n                <Toast.Header>\n                    <strong className=\"mr-auto\">React-Bootstrap</strong>\n                </Toast.Header>\n                <Toast.Body>{children}</Toast.Body>\n            </Toast>\n        </>\n    );\n};\n\nconst App = () => (\n    <Router>\n        <Navbar bg=\"light\">\n            {/*<Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>*/}\n            {/*<Nav.Link href=\"#home\">Home</Nav.Link>*/}\n            {/*<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">*/}\n                <Nav className=\"mr-auto\">\n\n                    <NavLink exact\n                             to=\"/\"\n                             className=\"navbar-brand\"\n                    >\n                        QR\n                    </NavLink>\n\n                    <NavLink exact\n                             to=\"/\"\n                             className=\"nav-link\"\n                             activeClassName=\"active\"\n                    >\n                        Generate\n                    </NavLink>\n\n                    <NavLink\n                        to=\"/scan\"\n                        className=\"nav-link\"\n                        activeClassName=\"active\"\n                    >\n                        Scan\n                    </NavLink>\n\n                    <NavLink\n                        to=\"/about\"\n                        className=\"nav-link\"\n                        activeClassName=\"active\"\n                    >\n                        About\n                    </NavLink>\n                </Nav>\n        </Navbar>\n        <Container fluid>\n            <Row>\n                <Col>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <GenerateQR/>\n                        </Route>\n                        <Route path=\"/scan\">\n                            <ScanQR/>\n                        </Route>\n                        <Route path=\"/about\">\n                            <Jumbotron>\n                                <h1 className=\"header\">Welcome To React-Bootstrap</h1>\n                                <ExampleToast>\n                                    We now have Toasts\n                                    <span role=\"img\" aria-label=\"tada\">🎉</span>\n                                </ExampleToast>\n                            </Jumbotron>\n                        </Route>\n                    </Switch>\n                </Col>\n            </Row>\n        </Container>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n//import reportWebVitals from './reportWebVitals';\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}